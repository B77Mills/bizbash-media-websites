import { getAsObject, getAsArray } from "@parameter1/base-cms-object-path";
import hierarchyAliases from "@parameter1/base-cms-marko-web/utils/hierarchy-aliases";
import queryFragment from '@bizbash-media/package-global/graphql/fragments/content-list';

$ const { GAM, nativeX: nxConfig, site } = out.global;
$ const { id, alias, name, pageNode } = data;

<marko-web-website-section-page-layout id=id alias=alias name=name>
  <@head>
    <marko-web-gtm-website-section-context|{ context }| alias=alias>
      <marko-web-gtm-push data=context />
    </marko-web-gtm-website-section-context>
    <marko-web-resolve-page|{ data: section }| node=pageNode>
      $ const aliases = hierarchyAliases(section);
      $ const adSlots = {
        'gpt-ad-lb1': GAM.getAdUnit({ name: 'lb1', aliases }),
        'gpt-ad-lb2': GAM.getAdUnit({ name: 'lb2', aliases }),
        'gpt-ad-rail1': GAM.getAdUnit({ name: 'rail1', aliases, size: [300, 600] }),
      };
      <marko-web-gam-slots slots=adSlots />
    </marko-web-resolve-page>
  </@head>
  <@above-container>
    <marko-web-resolve-page|{ data: section }| node=pageNode>
      $ const aliases = hierarchyAliases(section);
      <marko-web-gam-out-of-page-ad ...GAM.getAdUnit({ name: "wa", aliases }) />
      <marko-web-gam-out-of-page-ad ...GAM.getAdUnit({ name: "reskin", aliases }) />
    </marko-web-resolve-page>
  </@above-container>
  <@page>
    <marko-web-resolve-page|{ data: section, resolved }| node=pageNode>
      $ const aliases = hierarchyAliases(section);
      <marko-web-page-wrapper modifiers=["no-bottom-padding"]>
        <@section>
          <marko-web-gam-display-ad id="gpt-ad-lb1" />
        </@section>
        <@section>
          <global-breadcrumbs-website-section section=section />
          <marko-web-website-section-name tag="h1" class="page-wrapper__title" obj=section />
          <marko-web-website-section-description tag="p" class="page-wrapper__description" obj=section />
        </@section>
      </marko-web-page-wrapper>

      <div class="row">
        $ const children = getAsArray(section, "children.edges").map(({ node }) => node);
        $ const childrenMap = children.reduce((map, child) => {
          map.set(child.alias, child);
          return map
        }, new Map());
        $ const sectionOrder = [
          'venues-destinations/united-states',
          'venues-destinations/canada',
          'venues-destinations/north-america',
          'venues-destinations/global'
        ]
        <for|childAlias| of=sectionOrder>
          $ const child = childrenMap.get(childAlias);
          $ const grandChildren = getAsArray(child, "children.edges").map(({ node }) => node);
          <div class="col-lg-12 mb-block">
              <if (['North America', 'Global'].includes(child.name))>
                <marko-web-query|{ nodes }|
                  name="website-scheduled-content"
                  params={ sectionAlias: child.alias, limit: 15, queryFragment, requiresImage: true }
                >
                  <div class="node-list__header">
                    <marko-web-link href=`/${child.alias}`>${child.name}</marko-web-link>
                  </div>
                  <div class="row">
                    <div class="col-lg-4 mb-block">
                      <global-content-list-flow nodes=nodes.slice(0,5) />
                    </div>
                    <div class="col-lg-4 mb-block">
                      <global-content-list-flow nodes=nodes.slice(5,10) />
                    </div>
                    <div class="col-lg-4 mb-block">
                      <global-content-list-flow nodes=nodes.slice(10,15) />
                    </div>
                  </div>
                </marko-web-query>
              </if>
              <else>
                <div class="node-list__header">
                  <marko-web-link href=`/${child.alias}`>${child.name}</marko-web-link>
                </div>
              </else>
            <if(grandChildren.length)>
              <div class="row">
              <for|grandChild| of=grandChildren>
                <div class="col-lg-4 mb-block">
                  <marko-web-query|{ nodes }|
                    name="website-scheduled-content"
                    params={ sectionAlias: grandChild.alias, limit: 5, queryFragment, requiresImage: true }
                  >
                    <global-content-list-flow nodes=nodes>
                      <@header>
                         <marko-web-link href=`/${grandChild.alias}`>${grandChild.name}</marko-web-link>
                      </@header>
                    </global-content-list-flow>
                  </marko-web-query>
              </div>
              </for>
              </div>
            </if>
          </div>
          </for>
      </div>
    </marko-web-resolve-page>
  </@page>

  <@below-page>
    <marko-web-resolve-page|{ data: section }| node=pageNode>
      $ const aliases = hierarchyAliases(section);
      <marko-web-load-more
        component-name="content-load-more-flow"
        component-input={ aliases }
        fragment-name="content-list"
        query-name="website-scheduled-content"
        query-params={ sectionId: id, limit: 14, skip: 10, requiresImage: true }
        page-input={ for: "website-section", id }
      />
    </marko-web-resolve-page>
  </@below-page>
</marko-web-website-section-page-layout>
